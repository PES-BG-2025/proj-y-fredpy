---
title: "FREDpy"
subtitle: Federal Reserve Bank - Dashboard
author: David García y Daniel Monroy
format: 
    revealjs:
        incremental: false
        theme: dracula
        slide-number: "c/t"
---

## Descripción del proyecto

El proyecto consiste en un **pipeline de datos en Python** para consultar la API de **FRED** (Federal Reserve Bank of St. Louis), obtener **series temporales de exportaciones, importaciones y PNB** de EE. UU y mostrarlas en un Dashboard web para visualizar cono evolucionan las variables macroeconómicas de este país.

## API de la FRED
La API de FRED es un servicio web que permite a los desarrolladores acceder de forma programática a los datos económicos históricos y en tiempo real del Banco de la Reserva Federal de San Luis

![](api_fred.png){fig-align="center"}


## Librerias utilizadas
- tomllib
- **requests**
- **dash**
  - plotly.express
  - pandas

## Arquitectura

![Diagrama de componentes](diagrama_componentes.png)

## api_client.py
En el archivo `config.toml` se guarda la configuración que determina el comportamiento de un sistema y los recursos que utiliza 

```toml
[app]
fred_url = "https://api.stlouisfed.org/fred"
api_key = "6f87a4be50cef4ad00bd25a16db9f1b0"
```
obtener configuración usando libreria `tomllib`

```python
import tomllib as toml

with open("config.toml", "rb") as file:
    config = toml.load(file)
    
BASE_URL = str(config["app"]["fred_url"])
API_KEY = config["app"]["api_key"]
```

## api_client.py
Funcionalidad para consumir el API de la FRED y obtener los datos actualizados
```python

import requests
def get_observations(id_serie:str, fecha_inicial, fecha_final):
    '''
    Consume el API de la FRED para obtener observaciones de los datos
    '''
    url = BASE_URL + "/series/observations"
    params = {
        "api_key" : API_KEY,
        "file_type" : "json",
        "series_id" : id_serie,
        "observation_start" : fecha_inicial,
        "observation_end" : fecha_final
    }
    result = requests.get(url, params)
    return result.json()
```

## etl.py
El script ETL que se puede ejecutar para transformar y guardar los datos en formato `.csv`

1. obtener datos desde el `api_client.py`:

```python
transformar_csv(
        api_clien
        t.get_observations("EXPGS", 
                            "2000-01-01", 
                            "2025-01-12")
        , "EXPGS_out.csv")
```
## etl.py
2. calcular el nuevo campo QoQ 
```python
...
def transformar_csv(data_dict:dict, filename:str):
    df_observaciones = pd.DataFrame(data_dict["observations"])
    num_observaciones = data_dict["count"]

    df_observaciones["QoQ"] = None
    for i in range(1, num_observaciones)
        df_observaciones.loc[i, "QoQ"] = cambio_porcentual(
                        float(df_observaciones.at[i-1,"value"]), 
                        float(df_observaciones.at[i, "value"])
                    )
```
3. guardarlos en archivos `.csv`
```python
df_observaciones.to_csv(filename, index=False)
```